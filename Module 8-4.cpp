/*Задание 4. Убийца Steam
Что нужно сделать
Вы пишете программу-инсталлятор для компьютерной игры. Пока обновление скачивается, пользователю нужно показать прогресс загрузки, чтобы он мог решить, подождать ему у экрана компьютера или заварить чай.

Напишите программу, принимающую на вход размер файла обновления в мегабайтах и скорость интернет-соединения в мегабайтах в секунду.
В каждую секунду программа показывает, сколько процентов от общего объёма обновления уже скачано, до тех пор, пока файл не загрузится. 
После установки обновления программа выводит время в секундах, которое заняло скачивание. Обеспечьте контроль ввода.

Пример выполнения

Ввод:

Укажите размер файла для скачивания: 123

Какова скорость вашего соединения? 27

Вывод:

Прошло 1 сек. Скачано 27 из 123 МБ (21%).

Прошло 2 сек. Скачано 54 из 123 МБ (43%).

Прошло 3 сек. Скачано 81 из 123 МБ (65%).

Прошло 4 сек. Скачано 108 из 123 МБ (87%).

Прошло 5 сек. Скачано 123 из 123 МБ (100%).

Рекомендации по выполнению
Обратите внимание, что проценты это целые числа.

Что оценивается
Программа работает корректно с любыми заданными значениями.
Количество процентов не вводит в заблуждение пользователя. Например, не должно выводиться 100%, если файл ещё не загрузился.*/
#include <cmath>
#include <iostream>
#include <Windows.h>

int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    //минимальные размеры кубика
    float minX = 5.0f, minY = 5.0f, minZ = 5.0f;

    std::cout << "Введите размеры бруска (в сатиметрах)" << std::endl;
    std::cout << "X: ";
    float xWorkPiece;
    std::cin >> xWorkPiece;
    while (xWorkPiece < minX) {
        std::cout << "Рзамер должен быть больше или равен " << minX << " см. Введите снова: ";
        std::cin >> xWorkPiece;
    }

    std::cout << "Y: ";
    float yWorkPiece;
    std::cin >> yWorkPiece;
    while (yWorkPiece < minY) {
        std::cout << "Рзамер должен быть больше или равен " << minY << " см. Введите снова: ";
        std::cin >> yWorkPiece;
    }

    std::cout << "Z: ";
    float zWorkPiece;
    std::cin >> zWorkPiece;
    while (zWorkPiece < minZ) {
        std::cout << "Рзамер должен быть больше или равен " << minZ << " см. Введите снова: ";
        std::cin >> zWorkPiece;
    }
    // подсчитываем количество кубиков которые можно сделать из заготовки
    int quantityCube = ((int)xWorkPiece / 5) * ((int)yWorkPiece / 5) * ((int)zWorkPiece / 5);

    // количество кубиков в одной стороне набора
    int edgeCubeSet = std::cbrt(quantityCube);

    // количество кубиков в наборе
    int quantityCubeSet = std::pow(edgeCubeSet, 3);

    std::cout << "Количество кубиков которые можно изготовить из этого бруска - " << quantityCube << " шт." << std::endl;
    std::cout << "количество наборов по " << quantityCubeSet << " кубиков, которое можно составить из них будет - " << quantityCube / quantityCubeSet << " шт." << std::endl;
}